[{"id":0,"description":"Algorithm: (0) - algorithm that runs on data and tries to move precicnts between districts\n\tProbability, exploration/exploitation factor: 0.9\n\tThe party we want to win: 0 - republican party, 1 - democrat: 0\n\tNumber of districts our candidate should win: 2\n\tNumber of steps to run before running size normalization: 400\n\tRecalculate what districts we are going to improve after each round: true\n\tMinimal difference in number of votes in district for our candidate and for oponent to conclude that our candidate is winning: 10000\n\tThe maximal number of iterations to run, used for algorithm 0 only, : 5000\n\nDistrict selection strategy, the way algorithm will select the district at each step to add precincts to: 0-select district with maximal quality accordiing to provided metric in which our candidate loses\nMetric, the way the quality of preicnct is calculated: 0 - best precicnt is the one that has biggest difference beetwen votes for our candidate and votes for oponent\nPrecinct selection strategy, the way algorithm selects what precicnt to add to selected district: 0 - select precinct of maximal quality according to selected metric\nDistrict normalizing strategy, the metric used to define correct district partition: number of votes in each district is closed up to some value\n\tAllowed number of precints/votes difference to be more/less than median number: 2000\n\nInitial precinct assignment strategy, used only for algorithm type 1: 0 - assigns some constant number of precincts to their districts\n\tMaximal number precincts to assign: 300\n\nWinning district assignment strategy, select which district are going to be treated as winning by our candidate and which are losing: 0 - district with it's initila precincts with highest quality according to selected metrict are going to be assigned as winners\n","data":[{"name":"3","votes":[133347,123275],"precincts":533},{"name":"2","votes":[134504,124378],"precincts":551},{"name":"1","votes":[73760,185718],"precincts":399}]},{"id":1,"description":"Algorithm: (0) - algorithm that runs on data and tries to move precicnts between districts\n\tProbability, exploration/exploitation factor: 0.9\n\tThe party we want to win: 0 - republican party, 1 - democrat: 0\n\tNumber of districts our candidate should win: 2\n\tNumber of steps to run before running size normalization: 400\n\tRecalculate what districts we are going to improve after each round: true\n\tMinimal difference in number of votes in district for our candidate and for oponent to conclude that our candidate is winning: 10000\n\tThe maximal number of iterations to run, used for algorithm 0 only, : 5000\n\nDistrict selection strategy, the way algorithm will select the district at each step to add precincts to: 0-select district with maximal quality accordiing to provided metric in which our candidate loses\nMetric, the way the quality of preicnct is calculated: 0 - best precicnt is the one that has biggest difference beetwen votes for our candidate and votes for oponent\nPrecinct selection strategy, the way algorithm selects what precicnt to add to selected district: 0 - select precinct of maximal quality according to selected metric\nDistrict normalizing strategy, the metric used to define correct district partition: number of precincts in each district is closed\n\tAllowed number of precints/votes difference to be more/less than median number: 40\n\nInitial precinct assignment strategy, used only for algorithm type 1: 0 - assigns some constant number of precincts to their districts\n\tMaximal number precincts to assign: 300\n\nWinning district assignment strategy, select which district are going to be treated as winning by our candidate and which are losing: 0 - district with it's initila precincts with highest quality according to selected metrict are going to be assigned as winners\n"},{"id":2,"description":"Algorithm: (0) - algorithm that runs on data and tries to move precicnts between districts\n\tProbability, exploration/exploitation factor: 0.9\n\tThe party we want to win: 0 - republican party, 1 - democrat: 0\n\tNumber of districts our candidate should win: 2\n\tNumber of steps to run before running size normalization: 400\n\tRecalculate what districts we are going to improve after each round: true\n\tMinimal difference in number of votes in district for our candidate and for oponent to conclude that our candidate is winning: 10000\n\tThe maximal number of iterations to run, used for algorithm 0 only, : 5000\n\nDistrict selection strategy, the way algorithm will select the district at each step to add precincts to: 1-select district with minimal number of votes\nMetric, the way the quality of preicnct is calculated: 0 - best precicnt is the one that has biggest difference beetwen votes for our candidate and votes for oponent\nPrecinct selection strategy, the way algorithm selects what precicnt to add to selected district: 0 - select precinct of maximal quality according to selected metric\nDistrict normalizing strategy, the metric used to define correct district partition: number of precincts in each district is closed\n\tAllowed number of precints/votes difference to be more/less than median number: 40\n\nInitial precinct assignment strategy, used only for algorithm type 1: 0 - assigns some constant number of precincts to their districts\n\tMaximal number precincts to assign: 300\n\nWinning district assignment strategy, select which district are going to be treated as winning by our candidate and which are losing: 0 - district with it's initila precincts with highest quality according to selected metrict are going to be assigned as winners\n"},{"id":3,"description":"Algorithm: (0) - algorithm that runs on data and tries to move precicnts between districts\n\tProbability, exploration/exploitation factor: 0.9\n\tThe party we want to win: 0 - republican party, 1 - democrat: 0\n\tNumber of districts our candidate should win: 2\n\tNumber of steps to run before running size normalization: 400\n\tRecalculate what districts we are going to improve after each round: true\n\tMinimal difference in number of votes in district for our candidate and for oponent to conclude that our candidate is winning: 10000\n\tThe maximal number of iterations to run, used for algorithm 0 only, : 5000\n\nDistrict selection strategy, the way algorithm will select the district at each step to add precincts to: 2-select district with minimal number of precincts\nMetric, the way the quality of preicnct is calculated: 0 - best precicnt is the one that has biggest difference beetwen votes for our candidate and votes for oponent\nPrecinct selection strategy, the way algorithm selects what precicnt to add to selected district: 0 - select precinct of maximal quality according to selected metric\nDistrict normalizing strategy, the metric used to define correct district partition: number of votes in each district is closed up to some value\n\tAllowed number of precints/votes difference to be more/less than median number: 20000\n\nInitial precinct assignment strategy, used only for algorithm type 1: 0 - assigns some constant number of precincts to their districts\n\tMaximal number precincts to assign: 300\n\nWinning district assignment strategy, select which district are going to be treated as winning by our candidate and which are losing: 0 - district with it's initila precincts with highest quality according to selected metrict are going to be assigned as winners\n"},{"id":4,"description":"Algorithm: (0) - algorithm that runs on data and tries to move precicnts between districts\n\tProbability, exploration/exploitation factor: 0.8\n\tThe party we want to win: 0 - republican party, 1 - democrat: 0\n\tNumber of districts our candidate should win: 2\n\tNumber of steps to run before running size normalization: 400\n\tRecalculate what districts we are going to improve after each round: true\n\tMinimal difference in number of votes in district for our candidate and for oponent to conclude that our candidate is winning: 10000\n\tThe maximal number of iterations to run, used for algorithm 0 only, : 5000\n\nDistrict selection strategy, the way algorithm will select the district at each step to add precincts to: 0-select district with maximal quality accordiing to provided metric in which our candidate loses\nMetric, the way the quality of preicnct is calculated: 0 - best precicnt is the one that has biggest difference beetwen votes for our candidate and votes for oponent\nPrecinct selection strategy, the way algorithm selects what precicnt to add to selected district: 0 - select precinct of maximal quality according to selected metric\nDistrict normalizing strategy, the metric used to define correct district partition: number of votes in each district is closed up to some value\n\tAllowed number of precints/votes difference to be more/less than median number: 20000\n\nInitial precinct assignment strategy, used only for algorithm type 1: 0 - assigns some constant number of precincts to their districts\n\tMaximal number precincts to assign: 300\n\nWinning district assignment strategy, select which district are going to be treated as winning by our candidate and which are losing: 0 - district with it's initila precincts with highest quality according to selected metrict are going to be assigned as winners\n"},{"id":5,"description":"Algorithm: (1) - algorithm that takes partial partition of precincts and assigns the others based on some metric\n\tProbability, exploration/exploitation factor: 0.9\n\tThe party we want to win: 0 - republican party, 1 - democrat: 0\n\tNumber of districts our candidate should win: 2\n\tNumber of steps to run before running size normalization: 400\n\tRecalculate what districts we are going to improve after each round: true\n\tMinimal difference in number of votes in district for our candidate and for oponent to conclude that our candidate is winning: 10000\n\tThe maximal number of iterations to run, used for algorithm 0 only, : 5000\n\nDistrict selection strategy, the way algorithm will select the district at each step to add precincts to: 1-select district with minimal number of votes\nMetric, the way the quality of preicnct is calculated: 0 - best precicnt is the one that has biggest difference beetwen votes for our candidate and votes for oponent\nPrecinct selection strategy, the way algorithm selects what precicnt to add to selected district: 0 - select precinct of maximal quality according to selected metric\nDistrict normalizing strategy, the metric used to define correct district partition: number of votes in each district is closed up to some value\n\tAllowed number of precints/votes difference to be more/less than average: 20000\n\nInitial precinct assignment strategy, used only for algorithm type 1: 0 - assigns some constant number of precincts to their districts\n\tMaximal number precincts to assign: 200\n\nWinning district assignment strategy, select which district are going to be treated as winning by our candidate and which are losing: 0 - district with it's initila precincts with highest quality according to selected metrict are going to be assigned as winners\n"},{"id":6,"description":"Algorithm: (1) - algorithm that takes partial partition of precincts and assigns the others based on some metric\n\tProbability, exploration/exploitation factor: 0.9\n\tThe party we want to win: 0 - republican party, 1 - democrat: 0\n\tNumber of districts our candidate should win: 2\n\tNumber of steps to run before running size normalization: 400\n\tRecalculate what districts we are going to improve after each round: true\n\tMinimal difference in number of votes in district for our candidate and for oponent to conclude that our candidate is winning: 5000\n\tThe maximal number of iterations to run, used for algorithm 0 only, : 5000\n\nDistrict selection strategy, the way algorithm will select the district at each step to add precincts to: 1-select district with minimal number of votes\nMetric, the way the quality of preicnct is calculated: 0 - best precicnt is the one that has biggest difference beetwen votes for our candidate and votes for oponent\nPrecinct selection strategy, the way algorithm selects what precicnt to add to selected district: 0 - select precinct of maximal quality according to selected metric\nDistrict normalizing strategy, the metric used to define correct district partition: number of votes in each district is closed up to some value\n\tAllowed number of precints/votes difference to be more/less than average: 20000\n\nInitial precinct assignment strategy, used only for algorithm type 1: 1 - assigns precincts until number of district in which our candidate wins gets below of required\n\tMaximal number precincts to assign: 200\n\nWinning district assignment strategy, select which district are going to be treated as winning by our candidate and which are losing: 0 - district with it's initila precincts with highest quality according to selected metrict are going to be assigned as winners\n"},{"id":7,"description":"Algorithm: (1) - algorithm that takes partial partition of precincts and assigns the others based on some metric\n\tProbability, exploration/exploitation factor: 0.9\n\tThe party we want to win: 0 - republican party, 1 - democrat: 0\n\tNumber of districts our candidate should win: 2\n\tNumber of steps to run before running size normalization: 400\n\tRecalculate what districts we are going to improve after each round: true\n\tMinimal difference in number of votes in district for our candidate and for oponent to conclude that our candidate is winning: 5000\n\tThe maximal number of iterations to run, used for algorithm 0 only, : 5000\n\nDistrict selection strategy, the way algorithm will select the district at each step to add precincts to: 2-select district with minimal number of precincts\nMetric, the way the quality of preicnct is calculated: 0 - best precicnt is the one that has biggest difference beetwen votes for our candidate and votes for oponent\nPrecinct selection strategy, the way algorithm selects what precicnt to add to selected district: 0 - select precinct of maximal quality according to selected metric\nDistrict normalizing strategy, the metric used to define correct district partition: number of votes in each district is closed up to some value\n\tAllowed number of precints/votes difference to be more/less than average: 20000\n\nInitial precinct assignment strategy, used only for algorithm type 1: 1 - assigns precincts until number of district in which our candidate wins gets below of required\n\tMaximal number precincts to assign: 200\n\nWinning district assignment strategy, select which district are going to be treated as winning by our candidate and which are losing: 0 - district with it's initila precincts with highest quality according to selected metrict are going to be assigned as winners\n"},{"id":8,"description":"Algorithm: (1) - algorithm that takes partial partition of precincts and assigns the others based on some metric\n\tProbability, exploration/exploitation factor: 0.7\n\tThe party we want to win: 0 - republican party, 1 - democrat: 0\n\tNumber of districts our candidate should win: 2\n\tNumber of steps to run before running size normalization: 400\n\tRecalculate what districts we are going to improve after each round: true\n\tMinimal difference in number of votes in district for our candidate and for oponent to conclude that our candidate is winning: 5000\n\tThe maximal number of iterations to run, used for algorithm 0 only, : 5000\n\nDistrict selection strategy, the way algorithm will select the district at each step to add precincts to: 2-select district with minimal number of precincts\nMetric, the way the quality of preicnct is calculated: 0 - best precicnt is the one that has biggest difference beetwen votes for our candidate and votes for oponent\nPrecinct selection strategy, the way algorithm selects what precicnt to add to selected district: 0 - select precinct of maximal quality according to selected metric\nDistrict normalizing strategy, the metric used to define correct district partition: number of votes in each district is closed up to some value\n\tAllowed number of precints/votes difference to be more/less than average: 20000\n\nInitial precinct assignment strategy, used only for algorithm type 1: 1 - assigns precincts until number of district in which our candidate wins gets below of required\n\tMaximal number precincts to assign: 200\n\nWinning district assignment strategy, select which district are going to be treated as winning by our candidate and which are losing: 0 - district with it's initila precincts with highest quality according to selected metrict are going to be assigned as winners\n"},{"id":9,"description":"Algorithm: (1) - algorithm that takes partial partition of precincts and assigns the others based on some metric\n\tProbability, exploration/exploitation factor: 0.7\n\tThe party we want to win: 0 - republican party, 1 - democrat: 0\n\tNumber of districts our candidate should win: 2\n\tNumber of steps to run before running size normalization: 400\n\tRecalculate what districts we are going to improve after each round: true\n\tMinimal difference in number of votes in district for our candidate and for oponent to conclude that our candidate is winning: 5000\n\tThe maximal number of iterations to run, used for algorithm 0 only, : 5000\n\nDistrict selection strategy, the way algorithm will select the district at each step to add precincts to: 2-select district with minimal number of precincts\nMetric, the way the quality of preicnct is calculated: 0 - best precicnt is the one that has biggest difference beetwen votes for our candidate and votes for oponent\nPrecinct selection strategy, the way algorithm selects what precicnt to add to selected district: 0 - select precinct of maximal quality according to selected metric\nDistrict normalizing strategy, the metric used to define correct district partition: number of votes in each district is closed up to some value\n\tAllowed number of precints/votes difference to be more/less than average: 20000\n\nInitial precinct assignment strategy, used only for algorithm type 1: 1 - assigns precincts until number of district in which our candidate wins gets below of required\n\tMaximal number precincts to assign: 200\n\nWinning district assignment strategy, select which district are going to be treated as winning by our candidate and which are losing: 0 - district with it's initila precincts with highest quality according to selected metrict are going to be assigned as winners\n"},{"id":10,"description":"Algorithm: (1) - algorithm that takes partial partition of precincts and assigns the others based on some metric\n\tProbability, exploration/exploitation factor: 0.7\n\tThe party we want to win: 0 - republican party, 1 - democrat: 0\n\tNumber of districts our candidate should win: 2\n\tNumber of steps to run before running size normalization: 400\n\tRecalculate what districts we are going to improve after each round: true\n\tMinimal difference in number of votes in district for our candidate and for oponent to conclude that our candidate is winning: 7000\n\tThe maximal number of iterations to run, used for algorithm 0 only, : 5000\n\nDistrict selection strategy, the way algorithm will select the district at each step to add precincts to: 2-select district with minimal number of precincts\nMetric, the way the quality of preicnct is calculated: 0 - best precicnt is the one that has biggest difference beetwen votes for our candidate and votes for oponent\nPrecinct selection strategy, the way algorithm selects what precicnt to add to selected district: 0 - select precinct of maximal quality according to selected metric\nDistrict normalizing strategy, the metric used to define correct district partition: number of votes in each district is closed up to some value\n\tAllowed number of precints/votes difference to be more/less than average: 20000\n\nInitial precinct assignment strategy, used only for algorithm type 1: 1 - assigns precincts until number of district in which our candidate wins gets below of required\n\tMaximal number precincts to assign: 200\n\nWinning district assignment strategy, select which district are going to be treated as winning by our candidate and which are losing: 0 - district with it's initila precincts with highest quality according to selected metrict are going to be assigned as winners\n"},{"id":11,"description":"Algorithm: (0) - algorithm that runs on data and tries to move precicnts between districts\n\tProbability, exploration/exploitation factor: 0.9\n\tThe party we want to win: 0 - republican party, 1 - democrat: 0\n\tNumber of districts our candidate should win: 2\n\tNumber of steps to run before running size normalization: 400\n\tRecalculate what districts we are going to improve after each round: true\n\tMinimal difference in number of votes in district for our candidate and for oponent to conclude that our candidate is winning: 5000\n\tThe maximal number of iterations to run, used for algorithm 0 only, : 5000\n\nDistrict selection strategy, the way algorithm will select the district at each step to add precincts to: 2-select district with minimal number of precincts\nMetric, the way the quality of preicnct is calculated: 0 - best precicnt is the one that has biggest difference beetwen votes for our candidate and votes for oponent\nPrecinct selection strategy, the way algorithm selects what precicnt to add to selected district: 0 - select precinct of maximal quality according to selected metric\nDistrict normalizing strategy, the metric used to define correct district partition: number of votes in each district is closed up to some value\n\tAllowed number of precints/votes difference to be more/less than median number: 2000\n\nInitial precinct assignment strategy, used only for algorithm type 1: 0 - assigns some constant number of precincts to their districts\n\tMaximal number precincts to assign: 300\n\nWinning district assignment strategy, select which district are going to be treated as winning by our candidate and which are losing: 0 - district with it's initila precincts with highest quality according to selected metrict are going to be assigned as winners\n"},{"id":12,"description":"Algorithm: (0) - algorithm that runs on data and tries to move precicnts between districts\n\tProbability, exploration/exploitation factor: 0.9\n\tThe party we want to win: 0 - republican party, 1 - democrat: 0\n\tNumber of districts our candidate should win: 2\n\tNumber of steps to run before running size normalization: 400\n\tRecalculate what districts we are going to improve after each round: true\n\tMinimal difference in number of votes in district for our candidate and for oponent to conclude that our candidate is winning: 5000\n\tThe maximal number of iterations to run, used for algorithm 0 only, : 5000\n\nDistrict selection strategy, the way algorithm will select the district at each step to add precincts to: 2-select district with minimal number of precincts\nMetric, the way the quality of preicnct is calculated: 0 - best precicnt is the one that has biggest difference beetwen votes for our candidate and votes for oponent\nPrecinct selection strategy, the way algorithm selects what precicnt to add to selected district: 0 - select precinct of maximal quality according to selected metric\nDistrict normalizing strategy, the metric used to define correct district partition: number of votes in each district is closed up to some value\n\tAllowed number of precints/votes difference to be more/less than median number: 2000\n\nInitial precinct assignment strategy, used only for algorithm type 1: 0 - assigns some constant number of precincts to their districts\n\tMaximal number precincts to assign: 300\n\nWinning district assignment strategy, select which district are going to be treated as winning by our candidate and which are losing: 0 - district with it's initila precincts with highest quality according to selected metrict are going to be assigned as winners\n"},{"id":13,"description":"Algorithm: (1) - algorithm that takes partial partition of precincts and assigns the others based on some metric\n\tProbability, exploration/exploitation factor: 0.8\n\tThe party we want to win: 0 - republican party, 1 - democrat: 0\n\tNumber of districts our candidate should win: 2\n\tNumber of steps to run before running size normalization: 400\n\tRecalculate what districts we are going to improve after each round: true\n\tMinimal difference in number of votes in district for our candidate and for oponent to conclude that our candidate is winning: 7000\n\tThe maximal number of iterations to run, used for algorithm 0 only, : 5000\n\nDistrict selection strategy, the way algorithm will select the district at each step to add precincts to: 2-select district with minimal number of precincts\nMetric, the way the quality of preicnct is calculated: 0 - best precicnt is the one that has biggest difference beetwen votes for our candidate and votes for oponent\nPrecinct selection strategy, the way algorithm selects what precicnt to add to selected district: 0 - select precinct of maximal quality according to selected metric\nDistrict normalizing strategy, the metric used to define correct district partition: number of votes in each district is closed up to some value\n\tAllowed number of precints/votes difference to be more/less than average: 20000\n\nInitial precinct assignment strategy, used only for algorithm type 1: 1 - assigns precincts until number of district in which our candidate wins gets below of required\n\tMaximal number precincts to assign: 220\n\nWinning district assignment strategy, select which district are going to be treated as winning by our candidate and which are losing: 0 - district with it's initila precincts with highest quality according to selected metrict are going to be assigned as winners\n"},{"id":14,"description":"Algorithm: (1) - algorithm that takes partial partition of precincts and assigns the others based on some metric\n\tProbability, exploration/exploitation factor: 0.8\n\tThe party we want to win: 0 - republican party, 1 - democrat: 0\n\tNumber of districts our candidate should win: 2\n\tNumber of steps to run before running size normalization: 400\n\tRecalculate what districts we are going to improve after each round: true\n\tMinimal difference in number of votes in district for our candidate and for oponent to conclude that our candidate is winning: 7000\n\tThe maximal number of iterations to run, used for algorithm 0 only, : 5000\n\nDistrict selection strategy, the way algorithm will select the district at each step to add precincts to: 2-select district with minimal number of precincts\nMetric, the way the quality of preicnct is calculated: 0 - best precicnt is the one that has biggest difference beetwen votes for our candidate and votes for oponent\nPrecinct selection strategy, the way algorithm selects what precicnt to add to selected district: 0 - select precinct of maximal quality according to selected metric\nDistrict normalizing strategy, the metric used to define correct district partition: number of votes in each district is closed up to some value\n\tAllowed number of precints/votes difference to be more/less than average: 20000\n\nInitial precinct assignment strategy, used only for algorithm type 1: 1 - assigns precincts until number of district in which our candidate wins gets below of required\n\tMaximal number precincts to assign: 220\n\nWinning district assignment strategy, select which district are going to be treated as winning by our candidate and which are losing: 0 - district with it's initila precincts with highest quality according to selected metrict are going to be assigned as winners\n"}]